<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hugo Cactus Theme</title>
    <link>https://lake62.github.io/tutorial-jacob/post/</link>
    <description>Recent content in Posts on Hugo Cactus Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Jan 2018 07:53:57 +0100</lastBuildDate>
    
	<atom:link href="https://lake62.github.io/tutorial-jacob/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nikkud remover JavaScript</title>
      <link>https://lake62.github.io/tutorial-jacob/post/nikkud-remover-javascript/</link>
      <pubDate>Thu, 11 Jan 2018 07:53:57 +0100</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/nikkud-remover-javascript/</guid>
      <description># Test Javascript to remove nikkudNikkud (also Niqqud) is used in Hebrew to denote vowels.The diacretical signs can be removed with JavaScript.Flattening which means removing the Nikkud, happens by accessing the UTF-8 character, and replace the Nikkud.The output becomes Hebrew without the Nikkud.Input Hebrew with Nikkud:Remove Nikkud!Output of Hebrew without Nikkud:</description>
    </item>
    
    <item>
      <title>Html Test</title>
      <link>https://lake62.github.io/tutorial-jacob/post/html-test/</link>
      <pubDate>Sat, 18 Nov 2017 07:53:57 +0100</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/html-test/</guid>
      <description>HTML Test In the Atom Styleguide I found some interesting style snippets. I wonder if they will work on static sites as well. If they work the checkboxes would be especially nice. To follow along with a tutorial and check off steps.
UPDATE: With gfm-markdown checkboxes cannot be toggled (yet).
my gfm checkbox  HTML snippets Keyboard keys:
Ctrl+Shift+A
Progress:  75% progress 
Panel: Selected &amp;mdash; user is arrowing through the list.</description>
    </item>
    
    <item>
      <title>Crazy Idea</title>
      <link>https://lake62.github.io/tutorial-jacob/post/crazy-idea/</link>
      <pubDate>Mon, 13 Nov 2017 00:09:38 +0100</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/crazy-idea/</guid>
      <description>Creating an online company I&amp;rsquo;m having this idea to create my own company.
All alone, by myself.
I want to ingest data about market movements and product adoption. E.g. searches for buy （買う）and sell （売る）. And also terms that suggest adoption. Explain how the diffusion of innovation works, and its roadmap. Also, what we can expect.
Most important I want live data ingestion. And use this data to make offline graphs and predictions.</description>
    </item>
    
    <item>
      <title>Hugo Tutorial</title>
      <link>https://lake62.github.io/tutorial-jacob/post/hugo-tutorial-jacob-geeklaunch/</link>
      <pubDate>Tue, 07 Nov 2017 11:56:16 +0100</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/hugo-tutorial-jacob-geeklaunch/</guid>
      <description>Rating: 8/10  Make your own website Hugo tutorial This tutorial follows the video walkthrough done by Jacob from GeekLaunch. Note that this tutorial requires bash or bash on ubuntu on windows.
hugo new site tutorial-jacob cd tutorial-jacob vim config.toml # to see what&#39;s in the file. Type `esc` or `u` when accidently edited. hugo new post/first-post.md # write something in the first-post.md vim content/post/first-post.md  type ESC and :wq to quit VIM.</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://lake62.github.io/tutorial-jacob/post/first-post/</link>
      <pubDate>Tue, 07 Nov 2017 10:26:34 +0100</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/first-post/</guid>
      <description>My title This is my first post following Jacob&amp;rsquo;s Hugo tutorial.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://lake62.github.io/tutorial-jacob/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://lake62.github.io/tutorial-jacob/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://lake62.github.io/tutorial-jacob/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://lake62.github.io/tutorial-jacob/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lake62.github.io/tutorial-jacob/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>